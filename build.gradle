buildscript {
    repositories {
        maven { url "http://dl.bintray.com/releashaus/release" }
        maven { url "https://oss.sonatype.org/content/groups/public" }
    }

    dependencies {
        classpath 'org.scoverage:gradle-scoverage:1.0.8'
    }
}

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url "http://dl.bintray.com/scalaz/releases"
    }
}

if (hasProperty("release")) {
    version = [ "git", "describe", "--match", "[0-9]*", "--dirty"].execute().text.trim()
} else {
    version = [ "git", "describe", "--match", "[0-9]*", "--abbrev=0"].execute().text.trim() + "-SNAPSHOT"
}

task version << {
    println "Version: ${version}"
}

apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: org.scoverage.ScoveragePlugin

sourceCompatibility = "1.6"
targetCompatibility = "1.6"
def scalaVersion = "2.11.5"
def ossRelease = hasProperty("oss")
def signArtifacts = ossRelease || hasProperty("sign")

group = 'com.prezi.haskell'
description = 'Gradle plugin for Haskell projects'

dependencies {
    compile gradleApi()
    compile group: "org.scala-lang", name: "scala-library", version: "$scalaVersion"
    compile group: "org.scala-lang", name: "scala-compiler", version: "$scalaVersion"
    compile group: "com.jsuereth", name: "scala-arm_2.11", version: "1.4"
    compile group: "commons-io", name: "commons-io", version: "2.4"
    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'


    // Required only for the incubating stuff brought over from Gradle 2.0
    compile "commons-lang:commons-lang:2.6"

    testCompile group: "org.specs2", name: "specs2-core_2.11", version: "3.6.5"
    testCompile group: "org.specs2", name: "specs2-mock_2.11", version: "3.6.5"
    testCompile group: "org.specs2", name: "specs2-junit_2.11", version: "3.6.5"

    scoverage 'org.scoverage:scalac-scoverage-plugin_2.11:1.0.4'
    scoverage 'org.scoverage:scalac-scoverage-runtime_2.11:1.0.4'
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.useAnt = false
    scalaCompileOptions.additionalParameters = ["-unchecked", "-deprecation", "-feature", "-Xfatal-warnings"]
}

checkScoverage {
    // minimumLineRate = 0.9
}

uploadArchives {
    repositories {
        repositories {
            mavenDeployer {
                pom.project {
                    url "http://github.com/prezi/gradle-haskell-plugin"
                    name project.name
                    description project.description
                    packaging 'jar'

                    scm {
                        url "http://github.com/prezi/gradle-haskell-plugin"
                        connection "scm:git@github.com:prezi/gradle-haskell-plugin.git"
                        developerConnection "scm:git@github.com:prezi/gradle-haskell-plugin.git"
                    }

                    licenses {
                        license {
                            name "The Apache Software License, Version 2.0"
                            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            distribution "repo"
                        }
                    }

                    developers {
                        developer {
                            id "vigoo"
                            name "Daniel Vigovszky"
                            email 'daniel.vigovszky@gmail.com'
                        }
                    }
                }

                if (ossRelease) {
                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                }
                else if (project.hasProperty("nexusUser") && project.hasProperty("nexusPassword")) {
                    def user = project.getProperty("nexusUser")
                    def password = project.getProperty("nexusPassword")

                    repository(url: "https://artifactory.prezi.com/plugins-release-local/") {
                        authentication(userName: user, password: password)
                    }
                    snapshotRepository(url: "https://artifactory.prezi.com/plugins-snapshot-local/") {
                        authentication(userName: user, password: password)
                    }
                }
            }
        }
    }
}

if (signArtifacts) {
    apply plugin: "signing"

    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }
        }
    }
}

task javadocJar(type: Jar) {
    dependsOn scaladoc
    classifier = "javadoc"
    from "build/docs/scaladoc"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = "sources"
}

jar {
    from rootProject.file("LICENSE")
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

sourceSets {
    systest {
        scala.srcDir file('src/systest/scala')
        resources.srcDir file('src/systest/resources')
        compileClasspath = sourceSets.main.output + configurations.testCompile
        runtimeClasspath = output + compileClasspath
    }
}

task integTestBundle {
    dependsOn jar

    doLast {
        def source_resources = 'src/main/resources'

        def destination = 'build/integ-test-bundle'
        delete destination
        new File(destination).mkdirs()

        def lib = new File(destination, "lib")
        lib.mkdirs()
        copy {
            into lib
            from configurations.runtime
        }
        copy {
            into lib
            from 'build/libs'
            include "gradle-haskell-plugin-${version}.jar"
        }
    }
}

test {
    testLogging.showStandardStreams = true
    systemProperty "specs2.commandline", "console"
}

task systest(type: Test) {
    dependsOn integTestBundle
    include "**/systests/**"
    testClassesDir = sourceSets.systest.output.classesDir
    classpath += sourceSets.systest.runtimeClasspath

    systemProperty "test-projects-dir", "$projectDir/src/test-projects"

    reports {
        html {
            destination = "$buildDir/reports/systests"
        }

        junitXml {
            destination = "$buildDir/reports/systests"
        }
    }

    testLogging.showStandardStreams = true
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

check.dependsOn systest